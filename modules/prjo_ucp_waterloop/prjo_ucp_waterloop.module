<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;

/**
 * Implements hook_preprocess_node().
 */

/**
                 VIEW WATER LOOP
**/
function prjo_ucp_waterloop_preprocess_node(&$variables) {

    // drupal_set_message("VARIABLES");
    // kint('VARIABLES');
    // kint($variables->);
    // $node = $variables->getEntity();
    // $elements = $variables->get('elements');

    // kint($variables['elements']['#node']);
    // kint($elements);
    // $variables['elements']['field_ws_ref']['#object']->id();

    if ($variables['node']->getType() == 'water_loop'){
      $node = $variables['elements']['#node'];
      // $ws = $node->get('field_ws_ref')->getValue(); // WORKS but is not suggested
      // $ws = $node->get('field_ws_ref')->referencedEntities();
      $ws = [];
      foreach ($node->get('field_ws_ref')->referencedEntities() as $v) {
        // kint($v->id()); // $v = Drupal\node\Entity\Node
        $ws[] = $v->id();
      }
      $wr = [];
      foreach ($node->get('field_wr_ref')->referencedEntities() as $v) {
        // kint($v->id()); // $v = Drupal\node\Entity\Node
        $wr[] = $v->id();
      }
      \Drupal::logger('Water Loop')->notice('WS <pre><code>' . print_r($ws, TRUE) . '</code></pre>');
      \Drupal::logger('Water Loop')->notice('WR <pre><code>' . print_r($wr, TRUE) . '</code></pre>');
      // $tp = [];
      // foreach ($node->get('field_tp_ref')->referencedEntities() as $v) {
      //   // kint($v->id()); // $v = Drupal\node\Entity\Node
      //   $tp[] = $v->id();
      // }

      $tp = $node->get('field_tech_and_quantity')->getValue();
      /**
      Water Streams
      **/
      $wo_geojson = prjo_ucp_waterloop_view_custom_geojson('water_offer', $ws);

      /**
      Water Demands
      **/
      $wr_geojson = prjo_ucp_waterloop_view_custom_geojson('water_request', $wr);

      /**
      Technologies
      **/
      \Drupal::logger('Water Loop')->notice('TPQ <pre><code>' . print_r($tp, TRUE) . '</code></pre>');
      \Drupal::logger('Water Loop')->notice('<pre><code>' . print_r(\Drupal\Component\Serialization\Json::decode($tp[0]['value']), TRUE) . '</code></pre>');
      $tech_and_qty = \Drupal\Component\Serialization\Json::decode($tp[0]['value']);
      if (!empty($tech_and_qty)) {
        $tech = prjo_ucp_waterloop_view_tech($tech_and_qty);
      } else {
        $tech = [];
      }

      // (print_r($variables,TRUE));
      // Attach javascript functionalities for ajax command
      $variables['#attached'] = [
                  'library' => [ "prjo_ucp_waterloop/notifications",
                                 "prjo_ucp_waterloop/leaflet",
                                 "prjo_ucp_waterloop/mathjs",
                                 "prjo_ucp_waterloop/wlViewMap"
                               ],
                'drupalSettings' => [
                  'wlElements' => ["WS" => $wo_geojson, "WR" => $wr_geojson, "TP" => $tech, "TPQ" => $tech_and_qty]
                ]
              ];
    }
}

function _permutation(array $arr)
{
        $out=[[]];

        foreach($arr as $key2=> $item2){
            $copy=$out;
            foreach($copy as $k=> $v){
                array_push($copy[$k],$item2 );
            }
            array_push($out,...$copy);

        }

        return $out;
}
// print_r(permutation(array(1,2,3,4)));

/**
 * Implements hook_form_FORM_ID_alter().
 */
/**
                                            CREATE WATER LOOP
**/

function prjo_ucp_waterloop_form_node_water_loop_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Get the authenticated user
  $current_user = \Drupal::currentUser();
  // dpm($current_user->id());
  // dpm($form['actions']);
  // generally a form filed is composed by
  // - label
  // - input - $form['title']['widget'][0]['value']

  /**
  Water Streams
  **/
  $wo_geojson = prjo_ucp_waterloop_custom_geojson('water_offer', $current_user, $app_fields);
  $form['#attached']['drupalSettings']['geoJson']['ws'] = $wo_geojson;

  /**
  Water Demands
  **/
  $wr_geojson = prjo_ucp_waterloop_custom_geojson('water_request', $current_user, $app_fields);
  $form['#attached']['drupalSettings']['geoJson']['wr'] = $wr_geojson;

  // Alter the water loop node CREATE - Add js to implement multistep form
  // $current_user = \Drupal::currentUser();
  if ($current_user->id() != 1){

    // hide title label
    $form['title']['widget'][0]['value']['#title_display'] = 'invisible';
    $form['title']['widget'][0]['value']['#attributes']['placeholder'] = t('Insert a title for this water loop');
    // $form['title']['widget'][0]['value']['#attributes']['class'][] = 'm-0';
    $form['title']['widget'][0]['#attributes']['class'][] = 'm-0';
    // $form['title']['#attributes']['class'][] = 'm-0';

    $form['#attached']['library'][] = "prjo_ucp_waterloop/jquery_validation";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/mathjs";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/leaflet";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/wlLeafletCustom";

    // Add custom for elements for step 1
    // Role select
    // Application field select
    // $form['role'] = [
    //   '#type' => 'select',
    //   '#title' => t('Select your role'),
    //   '#options' => ['1' => t('Water User'),
    //                  '2' => t('Water Provider'),
    //                  '3' => t('Technology Provider'),
    //                 ],
    // ];

    // Custom submit functionalities
    // Convert the submit to a button and attach ajax functionalities to it
    $form['actions']['submit'] = [
      '#type' => 'button',
      '#value' => t('Submit'),
      '#attributes' => [
        'onclick' => 'return false;'
      ],
    ];

    unset($form['actions']['preview']);

  }
  // Hide the submit buttons
  // hide($form['actions']['#access'] = FALSE);
  // If we don't have access we cannot submit
  // $form['actions']['#access'] = FALSE;
}

/**
                                            EDIT WATER LOOP
**/
function prjo_ucp_waterloop_form_node_water_loop_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter the water loop node CREATE - Add js to implement multistep form
  $current_user = \Drupal::currentUser();
  $entity = $form_state->getFormObject()->getEntity();
  // $entity_type = $entity->bundle();
  // drupal_set_message(print_r($entity->get('field_tp_ref')->referencedEntities(),TRUE));

  $ws = [];
  foreach ($entity->get('field_ws_ref')->referencedEntities() as $v) {
    $ws[] = $v->id();
  }
  $wr = [];
  foreach ($entity->get('field_wr_ref')->referencedEntities() as $v) {
    $wr[] = $v->id();
  }
  $tp = [];
  foreach ($entity->get('field_tp_ref')->referencedEntities() as $v) {
    $tp[] = $v->id();
  }

  $tpq = $entity->get('field_tech_and_quantity')->getValue();

  // kint($entity->get('field_tech_and_quantity')->getValue());


  $form['#attached']['drupalSettings']['wlElements'] = ["WS" => $ws, "WR" => $wr,
                                                        "TP" => $tp,
                                                        "TPQ" => \Drupal\Component\Serialization\Json::decode($tpq[0]['value'])];

  /**
  Water Streams
  **/
  $wo_geojson = prjo_ucp_waterloop_custom_geojson('water_offer', $current_user, $app_fields);
  $form['#attached']['drupalSettings']['geoJson']['ws'] = $wo_geojson;

  /**
  Water Demands
  **/
  $wr_geojson = prjo_ucp_waterloop_custom_geojson('water_request', $current_user, $app_fields);
  $form['#attached']['drupalSettings']['geoJson']['wr'] = $wr_geojson;

  if ($current_user->id() != 1){
    // hide title label
    $form['title']['widget'][0]['value']['#title_display'] = 'invisible';
    $form['title']['widget'][0]['value']['#attributes']['placeholder'] = t('Insert a title for this water loop');
    // $form['title']['widget'][0]['value']['#attributes']['class'][] = 'm-0';
    $form['title']['widget'][0]['#attributes']['class'][] = 'm-0';
    // $form['title']['#attributes']['class'][] = 'm-0';

    $form['#attached']['library'][] = "prjo_ucp_waterloop/jquery_validation";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/mathjs";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/leaflet";
    $form['#attached']['library'][] = "prjo_ucp_waterloop/wlLeafletCustom";

    $form['actions']['submit'] = [
      '#type' => 'button',
      '#value' => t('Submit'),
      '#attributes' => [
        'onclick' => 'return false;',
        'class' => array('update')
      ],
    ];

    unset($form['actions']['preview']);

  }
}

// Custom functionalities

// Used in Water Loop view
// @ $array - an array of technologies nodes ids
function prjo_ucp_waterloop_view_tech($array) {

  \Drupal::logger('Water Loop - tech')->notice('<pre><code>' . print_r($array, TRUE) . '</code></pre>');

  $nids=[];
  foreach ($array as $key => $value) {
    $nids[]=$value['id'];
  }
  // Query all the selected technologies
  $entity = \Drupal::entityTypeManager()->getStorage('node');
  $query = $entity->getQuery();

  $query_tech = $query->condition('status', 1)
   ->condition('type', 'technology_product') #type = bundle id (machine name)
   ->condition('nid', $nids, 'IN')
   ->accessCheck(FALSE)
   ->execute();

  // Load multiples or single item load($id)
  $tech_nodes = $entity->loadMultiple($query_tech);
  $tech = [];
  foreach ($tech_nodes as $key => $node) {
    // \Drupal::logger('Water Loop')->notice('<pre><code>' . print_r($node->id(), TRUE) . '</code></pre>');

    $tech[$node->id()] = ["title" => $node->getTitle(),
     "author" => $node->getOwner()->getUsername(),
     "uid" => $node->getOwnerID(),
     "spec" => $node->get('field_technology_specifications')->value
    ];
  }
  return $tech;
}

function prjo_ucp_waterloop_view_custom_geojson($type, $nids) {
  // kint($nids);
  // Query all the water streams/water offers
  $entity = \Drupal::entityTypeManager()->getStorage('node');
  $query = $entity->getQuery();

  // $users = [2,5,17,22];
  // $query->condition('uid', $users, 'IN');

  $query_water = $query->condition('status', 1)
   ->condition('type', $type) #type = bundle id (machine name)
   ->condition('nid', $nids, 'IN')
   #->pager(15) #limit 15 items
   ->execute();

  // Load multiples or single item load($id)
  $water_nodes = $entity->loadMultiple($query_water);
  // dpm($ws);

  $geojson = [
    "type" => "FeatureCollection",
    "features" => [],
  ];
  foreach ($water_nodes as $key => $node) {
    $uid = $node->getOwnerID();
    $userName = $node->getOwner()->getUsername();
    // Get user/group picture url to add to the lefalet icon
    // NOTE See branch wl-map commit 9ee638cd

    // Add the feature only if the position is settled
    if(isset($node->get('field_water_stream_position')->value)){
      // kint($node);
      // set true false values for ismine
      // $ismine = ($current_user->id() == $uid) ? "true" : "false";
      // get coordinates values
      list($type, $blat, $blng) = explode(' ', $node->get('field_water_stream_position')->value);
      $feature = [
                "type" => "Feature",
                "geometry" => [
                  "type" => ucwords(strtolower($type)),
                  "coordinates" => [floatval(trim($blat,'()')), floatval(trim($blng,'()'))]
                ],
                "properties" => [
                  "nid" => $node->id(),
                  "title" => $node->get('title')->value,
                  "author" => $userName,
                  "uid" => $uid,
                  "application_field" => $node->get('field_application_field_txn')->target_id,
                  "flow" => $node->get('field_wr_flow')->value, // The flow is considered m3/day
                  // "ismine" => $ismine,
                  "selected" => "false"
                ]
              ];
      array_push($geojson['features'], $feature);

    }
  }

  return $geojson;
}


// Used for Create waterloop
function prjo_ucp_waterloop_custom_geojson($type, $current_user) {

  // Query all the water streams/water offers
  $entity = \Drupal::entityTypeManager()->getStorage('node');
  $query = $entity->getQuery();

  $query_water = $query->condition('status', 1)
   ->condition('type', $type) #type = bundle id (machine name)
   #->sort('created', 'ASC') #sorted
   #->pager(15) #limit 15 items
   ->execute();

  // Load multiples or single item load($id)
  $water_nodes = $entity->loadMultiple($query_water);
  // dpm($ws);

  $geojson = [
    "type" => "FeatureCollection",
    "features" => [],
  ];
  foreach ($water_nodes as $key => $node) {
    $uid = $node->getOwnerID();
    $userName = $node->getOwner()->getUsername();
    // Get user/group picture url to add to the lefalet icon
    // NOTE See branch wl-map commit 9ee638cd

    // Add the feature only if the position is settled
    if(isset($node->get('field_water_stream_position')->value)){
      // kint($node);
      // set true false values for ismine
      $ismine = ($current_user->id() == $uid) ? "true" : "false";
      // get coordinates values
      list($feat_type, $blat, $blng) = explode(' ', $node->get('field_water_stream_position')->value);
      $feature = [
                "type" => "Feature",
                "geometry" => [
                  "type" => ucwords(strtolower($feat_type)),
                  "coordinates" => [floatval(trim($blat,'()')), floatval(trim($blng,'()'))]
                ],
                "properties" => [
                  "nid" => $node->id(),
                  "title" => $node->get('title')->value,
                  "author" => $userName,
                  // "icon" => $userPicture,
                  "application_field" => $node->get('field_application_field_txn')->target_id,
                  "flow" => $node->get('field_wr_flow')->value, // The flow is considered m3/day
                  "ismine" => $ismine,
                  "type" => $type,
                  "selected" => "false"
                ]
              ];
      array_push($geojson['features'], $feature);

    }
  }

  return $geojson;
}
