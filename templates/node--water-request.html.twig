{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('node__content') }}>
    {# {{ content }} #}
    <div class="row mb-3">
      <div class="col-lg-8">
          <div class="row">
              <div class="col">
                  <div class="card shadow mb-3">
                      <div class="card-header py-3">
                          <!-- <p class="text-primary m-0 font-weight-bold">Water Request: {# {{ node.getTitle() }} #}</p> -->
                          <p class="text-primary m-0 font-weight-bold">Water Request: {{ label }}</p>
                      </div>
                      <div class="card-body">

                        <div class="form-row">
                            <div class="col">
                                <div class="form-group">
                                  <!-- <label for="username"><strong>Estimated Flow m3/day needed *</strong></label>
                                  <input class="form-control" type="text" placeholder="flow in m3/day" name="username"> -->
                                  {{ content.field_wr_flow }}
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                  {{ content.field_application_field_txn }}
                                </div>
                            </div>
                        </div>

                      </div>
                  </div>
                  <div class="card shadow">
                      <div class="card-header py-3">
                          <p class="text-primary m-0 font-weight-bold">Water request position</p>
                          {# {{ content.field_water_stream_position }} #}
                      </div>
                      <div class="card-body">
                        <div id="map" style="min-width: 150px; height: 50vh"></div>
                        {{ content.field_wr_address }}
                      </div>
                  </div>
                  {% if content.field_additional_info[0] is not empty %}
                  <div class="card shadow">
                    <div class="card-header py-3">
                        <p class="text-primary m-0 font-weight-bold">Additional information</p>
                    </div>
                    <div class="card-body">
                          <!-- <label for="signature"><strong>Describe in a few lines your activity and how the&nbsp;water flow will be applied to your activity</strong><br></label> -->
                            {{ content.field_additional_info }}
                    </div>
                  </div>
                  {% endif %}

              </div>
          </div>
      </div>
      <div class="col-lg-4">
          <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="text-primary font-weight-bold m-0">Target water quality parameters for the selected application field</h6>
            </div>
            <div class="card-body">
              <table class="table table-striped">
                <thead>
                    <tr>
                        <!-- <th colspan="2">The table header</th> -->
                      <th>Observed property</th>
                      <th>UOM</th>
                      <th>Min</th>
                      <th>Max</th>
                    </tr>
                </thead>
                <tbody id="an_spec">
                </tbody>
              </table>
            </div>
          </div>
      </div>
    </div>
  </div>

</article>
